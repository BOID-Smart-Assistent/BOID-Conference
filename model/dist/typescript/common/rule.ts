// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.0.2
//   protoc               v5.27.2
// source: common/rule.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { messageTypeRegistry } from "../typeRegistry";

export enum BoidType {
  BELIEF = 0,
  OBLIGATION = 1,
  INTENTION = 2,
  DESIRE = 3,
  UNRECOGNIZED = -1,
}

export function boidTypeFromJSON(object: any): BoidType {
  switch (object) {
    case 0:
    case "BELIEF":
      return BoidType.BELIEF;
    case 1:
    case "OBLIGATION":
      return BoidType.OBLIGATION;
    case 2:
    case "INTENTION":
      return BoidType.INTENTION;
    case 3:
    case "DESIRE":
      return BoidType.DESIRE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return BoidType.UNRECOGNIZED;
  }
}

export function boidTypeToJSON(object: BoidType): string {
  switch (object) {
    case BoidType.BELIEF:
      return "BELIEF";
    case BoidType.OBLIGATION:
      return "OBLIGATION";
    case BoidType.INTENTION:
      return "INTENTION";
    case BoidType.DESIRE:
      return "DESIRE";
    case BoidType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Rule {
  $type: "model.boid.Rule";
  head: string;
  complement: string;
  ruleType: BoidType;
}

function createBaseRule(): Rule {
  return { $type: "model.boid.Rule", head: "", complement: "", ruleType: 0 };
}

export const Rule = {
  $type: "model.boid.Rule" as const,

  encode(message: Rule, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.head !== "") {
      writer.uint32(10).string(message.head);
    }
    if (message.complement !== "") {
      writer.uint32(18).string(message.complement);
    }
    if (message.ruleType !== 0) {
      writer.uint32(24).int32(message.ruleType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Rule {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRule();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.head = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.complement = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.ruleType = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Rule {
    return {
      $type: Rule.$type,
      head: isSet(object.head) ? globalThis.String(object.head) : "",
      complement: isSet(object.complement) ? globalThis.String(object.complement) : "",
      ruleType: isSet(object.ruleType) ? boidTypeFromJSON(object.ruleType) : 0,
    };
  },

  toJSON(message: Rule): unknown {
    const obj: any = {};
    if (message.head !== "") {
      obj.head = message.head;
    }
    if (message.complement !== "") {
      obj.complement = message.complement;
    }
    if (message.ruleType !== 0) {
      obj.ruleType = boidTypeToJSON(message.ruleType);
    }
    return obj;
  },

  create(base?: DeepPartial<Rule>): Rule {
    return Rule.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Rule>): Rule {
    const message = createBaseRule();
    message.head = object.head ?? "";
    message.complement = object.complement ?? "";
    message.ruleType = object.ruleType ?? 0;
    return message;
  },
};

messageTypeRegistry.set(Rule.$type, Rule);

export interface DataLoaderOptions {
  cache?: boolean;
}

export interface DataLoaders {
  rpcDataLoaderOptions?: DataLoaderOptions;
  getDataLoader<T>(identifier: string, constructorFn: () => T): T;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
