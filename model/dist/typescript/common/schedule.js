"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.0.2
//   protoc               v5.27.2
// source: common/schedule.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.Presentation = exports.Timeslot = exports.Day = exports.Schedule = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
const typeRegistry_1 = require("../typeRegistry");
function createBaseSchedule() {
    return { $type: "model.boid.Schedule", schedule: [] };
}
exports.Schedule = {
    $type: "model.boid.Schedule",
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.schedule) {
            exports.Day.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSchedule();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.schedule.push(exports.Day.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            $type: exports.Schedule.$type,
            schedule: globalThis.Array.isArray(object?.schedule) ? object.schedule.map((e) => exports.Day.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.schedule?.length) {
            obj.schedule = message.schedule.map((e) => exports.Day.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.Schedule.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSchedule();
        message.schedule = object.schedule?.map((e) => exports.Day.fromPartial(e)) || [];
        return message;
    },
};
typeRegistry_1.messageTypeRegistry.set(exports.Schedule.$type, exports.Schedule);
function createBaseDay() {
    return { $type: "model.boid.Day", date: "", timeslots: [] };
}
exports.Day = {
    $type: "model.boid.Day",
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.date !== "") {
            writer.uint32(10).string(message.date);
        }
        for (const v of message.timeslots) {
            exports.Timeslot.encode(v, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDay();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.date = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.timeslots.push(exports.Timeslot.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            $type: exports.Day.$type,
            date: isSet(object.date) ? globalThis.String(object.date) : "",
            timeslots: globalThis.Array.isArray(object?.timeslots)
                ? object.timeslots.map((e) => exports.Timeslot.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.date !== "") {
            obj.date = message.date;
        }
        if (message.timeslots?.length) {
            obj.timeslots = message.timeslots.map((e) => exports.Timeslot.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.Day.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseDay();
        message.date = object.date ?? "";
        message.timeslots = object.timeslots?.map((e) => exports.Timeslot.fromPartial(e)) || [];
        return message;
    },
};
typeRegistry_1.messageTypeRegistry.set(exports.Day.$type, exports.Day);
function createBaseTimeslot() {
    return { $type: "model.boid.Timeslot", id: 0, presentations: [] };
}
exports.Timeslot = {
    $type: "model.boid.Timeslot",
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== 0) {
            writer.uint32(8).int32(message.id);
        }
        for (const v of message.presentations) {
            exports.Presentation.encode(v, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTimeslot();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.id = reader.int32();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.presentations.push(exports.Presentation.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            $type: exports.Timeslot.$type,
            id: isSet(object.id) ? globalThis.Number(object.id) : 0,
            presentations: globalThis.Array.isArray(object?.presentations)
                ? object.presentations.map((e) => exports.Presentation.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== 0) {
            obj.id = Math.round(message.id);
        }
        if (message.presentations?.length) {
            obj.presentations = message.presentations.map((e) => exports.Presentation.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.Timeslot.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseTimeslot();
        message.id = object.id ?? 0;
        message.presentations = object.presentations?.map((e) => exports.Presentation.fromPartial(e)) || [];
        return message;
    },
};
typeRegistry_1.messageTypeRegistry.set(exports.Timeslot.$type, exports.Timeslot);
function createBasePresentation() {
    return { $type: "model.boid.Presentation", id: 0, name: "", topic: "" };
}
exports.Presentation = {
    $type: "model.boid.Presentation",
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== 0) {
            writer.uint32(8).int32(message.id);
        }
        if (message.name !== "") {
            writer.uint32(18).string(message.name);
        }
        if (message.topic !== "") {
            writer.uint32(26).string(message.topic);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePresentation();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.id = reader.int32();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.topic = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            $type: exports.Presentation.$type,
            id: isSet(object.id) ? globalThis.Number(object.id) : 0,
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            topic: isSet(object.topic) ? globalThis.String(object.topic) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== 0) {
            obj.id = Math.round(message.id);
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.topic !== "") {
            obj.topic = message.topic;
        }
        return obj;
    },
    create(base) {
        return exports.Presentation.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBasePresentation();
        message.id = object.id ?? 0;
        message.name = object.name ?? "";
        message.topic = object.topic ?? "";
        return message;
    },
};
typeRegistry_1.messageTypeRegistry.set(exports.Presentation.$type, exports.Presentation);
function isSet(value) {
    return value !== null && value !== undefined;
}
