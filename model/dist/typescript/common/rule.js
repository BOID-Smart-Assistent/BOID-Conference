"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.0.2
//   protoc               v5.27.2
// source: common/rule.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.Rule = exports.BoidType = void 0;
exports.boidTypeFromJSON = boidTypeFromJSON;
exports.boidTypeToJSON = boidTypeToJSON;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
const typeRegistry_1 = require("../typeRegistry");
var BoidType;
(function (BoidType) {
    BoidType[BoidType["BELIEF"] = 0] = "BELIEF";
    BoidType[BoidType["OBLIGATION"] = 1] = "OBLIGATION";
    BoidType[BoidType["INTENTION"] = 2] = "INTENTION";
    BoidType[BoidType["DESIRE"] = 3] = "DESIRE";
    BoidType[BoidType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(BoidType || (exports.BoidType = BoidType = {}));
function boidTypeFromJSON(object) {
    switch (object) {
        case 0:
        case "BELIEF":
            return BoidType.BELIEF;
        case 1:
        case "OBLIGATION":
            return BoidType.OBLIGATION;
        case 2:
        case "INTENTION":
            return BoidType.INTENTION;
        case 3:
        case "DESIRE":
            return BoidType.DESIRE;
        case -1:
        case "UNRECOGNIZED":
        default:
            return BoidType.UNRECOGNIZED;
    }
}
function boidTypeToJSON(object) {
    switch (object) {
        case BoidType.BELIEF:
            return "BELIEF";
        case BoidType.OBLIGATION:
            return "OBLIGATION";
        case BoidType.INTENTION:
            return "INTENTION";
        case BoidType.DESIRE:
            return "DESIRE";
        case BoidType.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
function createBaseRule() {
    return { $type: "model.boid.Rule", head: "", complement: "", ruleType: 0 };
}
exports.Rule = {
    $type: "model.boid.Rule",
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.head !== "") {
            writer.uint32(10).string(message.head);
        }
        if (message.complement !== "") {
            writer.uint32(18).string(message.complement);
        }
        if (message.ruleType !== 0) {
            writer.uint32(24).int32(message.ruleType);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRule();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.head = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.complement = reader.string();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.ruleType = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            $type: exports.Rule.$type,
            head: isSet(object.head) ? globalThis.String(object.head) : "",
            complement: isSet(object.complement) ? globalThis.String(object.complement) : "",
            ruleType: isSet(object.ruleType) ? boidTypeFromJSON(object.ruleType) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.head !== "") {
            obj.head = message.head;
        }
        if (message.complement !== "") {
            obj.complement = message.complement;
        }
        if (message.ruleType !== 0) {
            obj.ruleType = boidTypeToJSON(message.ruleType);
        }
        return obj;
    },
    create(base) {
        return exports.Rule.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseRule();
        message.head = object.head ?? "";
        message.complement = object.complement ?? "";
        message.ruleType = object.ruleType ?? 0;
        return message;
    },
};
typeRegistry_1.messageTypeRegistry.set(exports.Rule.$type, exports.Rule);
function isSet(value) {
    return value !== null && value !== undefined;
}
