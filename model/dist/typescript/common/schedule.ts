// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.0.2
//   protoc               v5.27.2
// source: common/schedule.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { messageTypeRegistry } from "../typeRegistry";

export interface Schedule {
  $type: "model.boid.Schedule";
  /** All the timeslots in the schedule */
  schedule: Day[];
}

export interface Day {
  $type: "model.boid.Day";
  date: string;
  timeslots: Timeslot[];
}

export interface Timeslot {
  $type: "model.boid.Timeslot";
  id: number;
  presentations: Presentation[];
}

/** Rework this into a more detailed way */
export interface Presentation {
  $type: "model.boid.Presentation";
  id: number;
  name: string;
  topic: string;
}

function createBaseSchedule(): Schedule {
  return { $type: "model.boid.Schedule", schedule: [] };
}

export const Schedule = {
  $type: "model.boid.Schedule" as const,

  encode(message: Schedule, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.schedule) {
      Day.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Schedule {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSchedule();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.schedule.push(Day.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Schedule {
    return {
      $type: Schedule.$type,
      schedule: globalThis.Array.isArray(object?.schedule) ? object.schedule.map((e: any) => Day.fromJSON(e)) : [],
    };
  },

  toJSON(message: Schedule): unknown {
    const obj: any = {};
    if (message.schedule?.length) {
      obj.schedule = message.schedule.map((e) => Day.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<Schedule>): Schedule {
    return Schedule.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Schedule>): Schedule {
    const message = createBaseSchedule();
    message.schedule = object.schedule?.map((e) => Day.fromPartial(e)) || [];
    return message;
  },
};

messageTypeRegistry.set(Schedule.$type, Schedule);

function createBaseDay(): Day {
  return { $type: "model.boid.Day", date: "", timeslots: [] };
}

export const Day = {
  $type: "model.boid.Day" as const,

  encode(message: Day, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.date !== "") {
      writer.uint32(10).string(message.date);
    }
    for (const v of message.timeslots) {
      Timeslot.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Day {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDay();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.date = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.timeslots.push(Timeslot.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Day {
    return {
      $type: Day.$type,
      date: isSet(object.date) ? globalThis.String(object.date) : "",
      timeslots: globalThis.Array.isArray(object?.timeslots)
        ? object.timeslots.map((e: any) => Timeslot.fromJSON(e))
        : [],
    };
  },

  toJSON(message: Day): unknown {
    const obj: any = {};
    if (message.date !== "") {
      obj.date = message.date;
    }
    if (message.timeslots?.length) {
      obj.timeslots = message.timeslots.map((e) => Timeslot.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<Day>): Day {
    return Day.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Day>): Day {
    const message = createBaseDay();
    message.date = object.date ?? "";
    message.timeslots = object.timeslots?.map((e) => Timeslot.fromPartial(e)) || [];
    return message;
  },
};

messageTypeRegistry.set(Day.$type, Day);

function createBaseTimeslot(): Timeslot {
  return { $type: "model.boid.Timeslot", id: 0, presentations: [] };
}

export const Timeslot = {
  $type: "model.boid.Timeslot" as const,

  encode(message: Timeslot, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    for (const v of message.presentations) {
      Presentation.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Timeslot {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTimeslot();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.presentations.push(Presentation.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Timeslot {
    return {
      $type: Timeslot.$type,
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      presentations: globalThis.Array.isArray(object?.presentations)
        ? object.presentations.map((e: any) => Presentation.fromJSON(e))
        : [],
    };
  },

  toJSON(message: Timeslot): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.presentations?.length) {
      obj.presentations = message.presentations.map((e) => Presentation.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<Timeslot>): Timeslot {
    return Timeslot.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Timeslot>): Timeslot {
    const message = createBaseTimeslot();
    message.id = object.id ?? 0;
    message.presentations = object.presentations?.map((e) => Presentation.fromPartial(e)) || [];
    return message;
  },
};

messageTypeRegistry.set(Timeslot.$type, Timeslot);

function createBasePresentation(): Presentation {
  return { $type: "model.boid.Presentation", id: 0, name: "", topic: "" };
}

export const Presentation = {
  $type: "model.boid.Presentation" as const,

  encode(message: Presentation, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.topic !== "") {
      writer.uint32(26).string(message.topic);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Presentation {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePresentation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.topic = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Presentation {
    return {
      $type: Presentation.$type,
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      topic: isSet(object.topic) ? globalThis.String(object.topic) : "",
    };
  },

  toJSON(message: Presentation): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.topic !== "") {
      obj.topic = message.topic;
    }
    return obj;
  },

  create(base?: DeepPartial<Presentation>): Presentation {
    return Presentation.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Presentation>): Presentation {
    const message = createBasePresentation();
    message.id = object.id ?? 0;
    message.name = object.name ?? "";
    message.topic = object.topic ?? "";
    return message;
  },
};

messageTypeRegistry.set(Presentation.$type, Presentation);

export interface DataLoaderOptions {
  cache?: boolean;
}

export interface DataLoaders {
  rpcDataLoaderOptions?: DataLoaderOptions;
  getDataLoader<T>(identifier: string, constructorFn: () => T): T;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
