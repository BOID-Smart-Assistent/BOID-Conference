"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.0.2
//   protoc               v5.27.2
// source: data/llm_input.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.User = exports.LlmInput = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
const schedule_1 = require("../common/schedule");
const typeRegistry_1 = require("../typeRegistry");
function createBaseLlmInput() {
    return { $type: "model.boid.LlmInput", schedule: undefined, user: undefined };
}
exports.LlmInput = {
    $type: "model.boid.LlmInput",
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.schedule !== undefined) {
            schedule_1.Schedule.encode(message.schedule, writer.uint32(10).fork()).join();
        }
        if (message.user !== undefined) {
            exports.User.encode(message.user, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLlmInput();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.schedule = schedule_1.Schedule.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.user = exports.User.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            $type: exports.LlmInput.$type,
            schedule: isSet(object.schedule) ? schedule_1.Schedule.fromJSON(object.schedule) : undefined,
            user: isSet(object.user) ? exports.User.fromJSON(object.user) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.schedule !== undefined) {
            obj.schedule = schedule_1.Schedule.toJSON(message.schedule);
        }
        if (message.user !== undefined) {
            obj.user = exports.User.toJSON(message.user);
        }
        return obj;
    },
    create(base) {
        return exports.LlmInput.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseLlmInput();
        message.schedule = (object.schedule !== undefined && object.schedule !== null)
            ? schedule_1.Schedule.fromPartial(object.schedule)
            : undefined;
        message.user = (object.user !== undefined && object.user !== null) ? exports.User.fromPartial(object.user) : undefined;
        return message;
    },
};
typeRegistry_1.messageTypeRegistry.set(exports.LlmInput.$type, exports.LlmInput);
function createBaseUser() {
    return {
        $type: "model.boid.User",
        id: 0,
        name: "",
        obligations: [],
        interests: [],
        preferredSpeakers: [],
        role: "",
        affiliations: "",
    };
}
exports.User = {
    $type: "model.boid.User",
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== 0) {
            writer.uint32(8).int32(message.id);
        }
        if (message.name !== "") {
            writer.uint32(18).string(message.name);
        }
        for (const v of message.obligations) {
            writer.uint32(26).string(v);
        }
        for (const v of message.interests) {
            writer.uint32(34).string(v);
        }
        for (const v of message.preferredSpeakers) {
            writer.uint32(42).string(v);
        }
        if (message.role !== "") {
            writer.uint32(50).string(message.role);
        }
        if (message.affiliations !== "") {
            writer.uint32(58).string(message.affiliations);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUser();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.id = reader.int32();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.obligations.push(reader.string());
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.interests.push(reader.string());
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.preferredSpeakers.push(reader.string());
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.role = reader.string();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.affiliations = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            $type: exports.User.$type,
            id: isSet(object.id) ? globalThis.Number(object.id) : 0,
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            obligations: globalThis.Array.isArray(object?.obligations)
                ? object.obligations.map((e) => globalThis.String(e))
                : [],
            interests: globalThis.Array.isArray(object?.interests)
                ? object.interests.map((e) => globalThis.String(e))
                : [],
            preferredSpeakers: globalThis.Array.isArray(object?.preferredSpeakers)
                ? object.preferredSpeakers.map((e) => globalThis.String(e))
                : [],
            role: isSet(object.role) ? globalThis.String(object.role) : "",
            affiliations: isSet(object.affiliations) ? globalThis.String(object.affiliations) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== 0) {
            obj.id = Math.round(message.id);
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.obligations?.length) {
            obj.obligations = message.obligations;
        }
        if (message.interests?.length) {
            obj.interests = message.interests;
        }
        if (message.preferredSpeakers?.length) {
            obj.preferredSpeakers = message.preferredSpeakers;
        }
        if (message.role !== "") {
            obj.role = message.role;
        }
        if (message.affiliations !== "") {
            obj.affiliations = message.affiliations;
        }
        return obj;
    },
    create(base) {
        return exports.User.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUser();
        message.id = object.id ?? 0;
        message.name = object.name ?? "";
        message.obligations = object.obligations?.map((e) => e) || [];
        message.interests = object.interests?.map((e) => e) || [];
        message.preferredSpeakers = object.preferredSpeakers?.map((e) => e) || [];
        message.role = object.role ?? "";
        message.affiliations = object.affiliations ?? "";
        return message;
    },
};
typeRegistry_1.messageTypeRegistry.set(exports.User.$type, exports.User);
function isSet(value) {
    return value !== null && value !== undefined;
}
