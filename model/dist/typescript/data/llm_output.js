"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.0.2
//   protoc               v5.27.2
// source: data/llm_output.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.LlmOutput = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
const rule_1 = require("../common/rule");
const typeRegistry_1 = require("../typeRegistry");
function createBaseLlmOutput() {
    return { $type: "model.boid.LlmOutput", rules: [], userId: 0 };
}
exports.LlmOutput = {
    $type: "model.boid.LlmOutput",
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.rules) {
            rule_1.Rule.encode(v, writer.uint32(10).fork()).join();
        }
        if (message.userId !== 0) {
            writer.uint32(16).int32(message.userId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLlmOutput();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.rules.push(rule_1.Rule.decode(reader, reader.uint32()));
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.userId = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            $type: exports.LlmOutput.$type,
            rules: globalThis.Array.isArray(object?.rules) ? object.rules.map((e) => rule_1.Rule.fromJSON(e)) : [],
            userId: isSet(object.userId) ? globalThis.Number(object.userId) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.rules?.length) {
            obj.rules = message.rules.map((e) => rule_1.Rule.toJSON(e));
        }
        if (message.userId !== 0) {
            obj.userId = Math.round(message.userId);
        }
        return obj;
    },
    create(base) {
        return exports.LlmOutput.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseLlmOutput();
        message.rules = object.rules?.map((e) => rule_1.Rule.fromPartial(e)) || [];
        message.userId = object.userId ?? 0;
        return message;
    },
};
typeRegistry_1.messageTypeRegistry.set(exports.LlmOutput.$type, exports.LlmOutput);
function isSet(value) {
    return value !== null && value !== undefined;
}
