"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.0.2
//   protoc               v5.27.2
// source: data/boid_output.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.BoidOutput = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
const typeRegistry_1 = require("../typeRegistry");
function createBaseBoidOutput() {
    return { $type: "model.boid.BoidOutput", presentations: [], userId: 0 };
}
exports.BoidOutput = {
    $type: "model.boid.BoidOutput",
    encode(message, writer = new wire_1.BinaryWriter()) {
        writer.uint32(10).fork();
        for (const v of message.presentations) {
            writer.int32(v);
        }
        writer.join();
        if (message.userId !== 0) {
            writer.uint32(16).int32(message.userId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBoidOutput();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag === 8) {
                        message.presentations.push(reader.int32());
                        continue;
                    }
                    if (tag === 10) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.presentations.push(reader.int32());
                        }
                        continue;
                    }
                    break;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.userId = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            $type: exports.BoidOutput.$type,
            presentations: globalThis.Array.isArray(object?.presentations)
                ? object.presentations.map((e) => globalThis.Number(e))
                : [],
            userId: isSet(object.userId) ? globalThis.Number(object.userId) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.presentations?.length) {
            obj.presentations = message.presentations.map((e) => Math.round(e));
        }
        if (message.userId !== 0) {
            obj.userId = Math.round(message.userId);
        }
        return obj;
    },
    create(base) {
        return exports.BoidOutput.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseBoidOutput();
        message.presentations = object.presentations?.map((e) => e) || [];
        message.userId = object.userId ?? 0;
        return message;
    },
};
typeRegistry_1.messageTypeRegistry.set(exports.BoidOutput.$type, exports.BoidOutput);
function isSet(value) {
    return value !== null && value !== undefined;
}
