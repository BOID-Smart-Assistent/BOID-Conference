// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.0.2
//   protoc               v5.27.2
// source: data/llm_input.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Schedule } from "../common/schedule";
import { messageTypeRegistry } from "../typeRegistry";

export interface LlmInput {
  $type: "model.boid.LlmInput";
  /** The schedule of the conference */
  schedule:
    | Schedule
    | undefined;
  /** the user information required for the rules */
  user: User | undefined;
}

export interface User {
  $type: "model.boid.User";
  /** Identification of the user */
  id: number;
  name: string;
  obligations: string[];
  interests: string[];
  preferredSpeakers: string[];
  role: string;
  affiliations: string;
}

function createBaseLlmInput(): LlmInput {
  return { $type: "model.boid.LlmInput", schedule: undefined, user: undefined };
}

export const LlmInput = {
  $type: "model.boid.LlmInput" as const,

  encode(message: LlmInput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.schedule !== undefined) {
      Schedule.encode(message.schedule, writer.uint32(10).fork()).join();
    }
    if (message.user !== undefined) {
      User.encode(message.user, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LlmInput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLlmInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.schedule = Schedule.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.user = User.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LlmInput {
    return {
      $type: LlmInput.$type,
      schedule: isSet(object.schedule) ? Schedule.fromJSON(object.schedule) : undefined,
      user: isSet(object.user) ? User.fromJSON(object.user) : undefined,
    };
  },

  toJSON(message: LlmInput): unknown {
    const obj: any = {};
    if (message.schedule !== undefined) {
      obj.schedule = Schedule.toJSON(message.schedule);
    }
    if (message.user !== undefined) {
      obj.user = User.toJSON(message.user);
    }
    return obj;
  },

  create(base?: DeepPartial<LlmInput>): LlmInput {
    return LlmInput.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LlmInput>): LlmInput {
    const message = createBaseLlmInput();
    message.schedule = (object.schedule !== undefined && object.schedule !== null)
      ? Schedule.fromPartial(object.schedule)
      : undefined;
    message.user = (object.user !== undefined && object.user !== null) ? User.fromPartial(object.user) : undefined;
    return message;
  },
};

messageTypeRegistry.set(LlmInput.$type, LlmInput);

function createBaseUser(): User {
  return {
    $type: "model.boid.User",
    id: 0,
    name: "",
    obligations: [],
    interests: [],
    preferredSpeakers: [],
    role: "",
    affiliations: "",
  };
}

export const User = {
  $type: "model.boid.User" as const,

  encode(message: User, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    for (const v of message.obligations) {
      writer.uint32(26).string(v!);
    }
    for (const v of message.interests) {
      writer.uint32(34).string(v!);
    }
    for (const v of message.preferredSpeakers) {
      writer.uint32(42).string(v!);
    }
    if (message.role !== "") {
      writer.uint32(50).string(message.role);
    }
    if (message.affiliations !== "") {
      writer.uint32(58).string(message.affiliations);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): User {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUser();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.obligations.push(reader.string());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.interests.push(reader.string());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.preferredSpeakers.push(reader.string());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.role = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.affiliations = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): User {
    return {
      $type: User.$type,
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      obligations: globalThis.Array.isArray(object?.obligations)
        ? object.obligations.map((e: any) => globalThis.String(e))
        : [],
      interests: globalThis.Array.isArray(object?.interests)
        ? object.interests.map((e: any) => globalThis.String(e))
        : [],
      preferredSpeakers: globalThis.Array.isArray(object?.preferredSpeakers)
        ? object.preferredSpeakers.map((e: any) => globalThis.String(e))
        : [],
      role: isSet(object.role) ? globalThis.String(object.role) : "",
      affiliations: isSet(object.affiliations) ? globalThis.String(object.affiliations) : "",
    };
  },

  toJSON(message: User): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.obligations?.length) {
      obj.obligations = message.obligations;
    }
    if (message.interests?.length) {
      obj.interests = message.interests;
    }
    if (message.preferredSpeakers?.length) {
      obj.preferredSpeakers = message.preferredSpeakers;
    }
    if (message.role !== "") {
      obj.role = message.role;
    }
    if (message.affiliations !== "") {
      obj.affiliations = message.affiliations;
    }
    return obj;
  },

  create(base?: DeepPartial<User>): User {
    return User.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<User>): User {
    const message = createBaseUser();
    message.id = object.id ?? 0;
    message.name = object.name ?? "";
    message.obligations = object.obligations?.map((e) => e) || [];
    message.interests = object.interests?.map((e) => e) || [];
    message.preferredSpeakers = object.preferredSpeakers?.map((e) => e) || [];
    message.role = object.role ?? "";
    message.affiliations = object.affiliations ?? "";
    return message;
  },
};

messageTypeRegistry.set(User.$type, User);

export interface DataLoaderOptions {
  cache?: boolean;
}

export interface DataLoaders {
  rpcDataLoaderOptions?: DataLoaderOptions;
  getDataLoader<T>(identifier: string, constructorFn: () => T): T;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
